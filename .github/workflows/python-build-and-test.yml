name: Python package builds and tests

# TODO: set up a separate workflow for Windows!

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        container: [ "ubuntu:latest", ]
        python-version: [ "3.13" ]

    env:
      # Hostname equals service name below.
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/

    services:
      postgres:
        image: timescale/timescaledb:latest-pg17
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          PGDATA: /var/lib/postgresql/data/pgdata
        volumes:
          - pg_data:/var/lib/postgresql/data/pgdata
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Set up container
        run: |
          apt update
          apt install -y --no-install-recommends \
            ca-certificates \
            git \
            jq \
            sqlite3

      - uses: actions/checkout@v4

      - name: Mark workspace as safe for git
        run: |
          echo ${{ github.workspace }}
          echo $GITHUB_WORKSPACE
          git config --global --add safe.directory ${{ github.workspace }}
          git config --global --add safe.directory ${{ github.workspace }}/*
          git config --global --add safe.directory ${{ github.workspace }}/**
          git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: ./chatgpt_proxy/uv.lock

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install the project
        working-directory: ./chatgpt_proxy
        run: |
          uv sync --locked --all-extras --dev

      - name: Build project
        working-directory: ./chatgpt_proxy
        run: |
          uv build

      - name: Sanitize container name
        shell: bash
        run: |
          export MATRIX_CONTAINER=${{ matrix.container }}
          echo "MATRIX_CONTAINER=${MATRIX_CONTAINER/:/_}" >> $GITHUB_ENV

      - name: Store/restore mypy cache
        uses: actions/cache@v4
        with:
          path: ./chatgpt_proxy/.mypy_cache
          key: mypy-cache-${{ env.MATRIX_CONTAINER }}-python-${{ matrix.python-version }}

      - name: Run mypy
        working-directory: ./chatgpt_proxy
        continue-on-error: true
        run: |
          uv run mypy . --output=json | jq -r '"::error title=Mypy issue,file=\(.file),line=\(.line),col=\(.column)::\(.message)"'

      - name: Run Ruff
        uses: astral-sh/ruff-action@v3
        continue-on-error: true
        with:
          src: ./chatgpt_proxy

      - name: Run pytest
        working-directory: ./chatgpt_proxy
        run: |
          uv run pytest -s --cov=chatgpt_proxy --cov-report html:cov_html

      - name: Store test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pytest-coverage-html-${{ env.MATRIX_CONTAINER }}-python-${{ matrix.python-version }}
          path: chatgpt_proxy/cov_html

      - name: Minimize uv cache
        working-directory: ./chatgpt_proxy
        run: uv cache prune --ci
